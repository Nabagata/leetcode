name: Format Files

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write   # write needed only for same-repo pushes; forks get read-only token automatically

jobs:
  format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR HEAD
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Detect fork vs same-repo
        id: ctx
        run: |
          if [ "${{ github.event.pull_request.head.repo.full_name }}" = "${{ github.repository }}" ]; then
            echo "same_repo=true" >> $GITHUB_OUTPUT
          else
            echo "same_repo=false" >> $GITHUB_OUTPUT
          fi

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install formatters
        run: |
          sudo apt-get update
          sudo gem install rufo
          npm i -g prettier prettier-plugin-java
      - name: Install Black
        uses: BSFishy/pip-action@v1
        with:
          packages: black

      - name: Run formatters
        run: |
          set -e
          # Use globs; .prettierrc discovered from repo root
          prettier --write "javascript/*.js" || true
          prettier --write "typescript/*.ts" || true
          prettier --write "java/*.java" || true
          rufo ruby || true
          python -m black . || true

      - name: Check for changes
        id: diff
        run: |
          git status --porcelain
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      # Auto-push only for same-repo PRs
      - name: Push formatting changes (same-repo only)
        if: steps.ctx.outputs.same_repo == 'true' && steps.diff.outputs.changed == 'true'
        run: |
          git config user.email "71089234+Ahmad-A0@users.noreply.github.com"
          git config user.name "Bot-A0"
          git add -A
          git commit -m "🎨 Format files (🛠️ from GitHub Actions)"
          git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.event.pull_request.head.repo.full_name }}.git" \
            HEAD:refs/heads/${{ github.event.pull_request.head.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # For forks, upload a patch artifact the author can apply locally: `git apply formatting.patch`
      - name: Create patch (forks only)
        if: steps.ctx.outputs.same_repo == 'false' && steps.diff.outputs.changed == 'true'
        run: |
          git diff > formatting.patch
          ls -l formatting.patch

      - name: Upload patch artifact (forks only)
        if: steps.ctx.outputs.same_repo == 'false' && steps.diff.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: formatting.patch
          path: formatting.patch
          if-no-files-found: error
          retention-days: 7

      # Leave a comment with instructions on fork PRs
      - name: Comment instructions (forks only)
        if: steps.ctx.outputs.same_repo == 'false' && steps.diff.outputs.changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const body = [
              "I ran the formatters and found changes. Since this is a forked PR, I can't push to your branch.",
              "",
              "**How to apply the patch:**",
              "```bash",
              "curl -L -o formatting.patch \"$ACTIONS_ARTIFACT_URL\"  # Download from the job's Artifacts section",
              "git apply formatting.patch",
              "git commit -am \"Apply formatting patch\"",
              "git push",
              "```",
              "",
              "Alternatively, run the same formatters locally: `prettier`, `rufo`, and `black`."
            ].join("\n");
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

      # Optional: make CI fail if formatting changes were needed (forces author to accept fixes or patch)
      - name: Fail if formatting changes are needed
        if: steps.diff.outputs.changed == 'true' && steps.ctx.outputs.same_repo == 'false'
        run: |
          echo "Formatting changes required. Patch uploaded as an artifact."
          exit 1
